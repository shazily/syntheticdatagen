{
  "name": "Synthetic Data - Intelligent Generator V3 (RAG + Learning)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "generate-intelligent-v3-learn",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "b90391df-9a8b-4d87-b759-2e4b9adcebd6",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "position": [-1024, 64],
      "typeVersion": 1.1,
      "webhookId": "generate-intelligent-v3-fixed-webhook"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "user-prompt",
              "name": "query",
              "value": "={{ $json.body.chatInput || $json.body.prompt || $json.chatInput || $json.prompt }}",
              "type": "string"
            },
            {
              "id": "session-id",
              "name": "sessionId",
              "value": "={{ $json.body.sessionId || $json.sessionId || 'default-session' }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "cf17b14b-9042-424e-95f0-ccc230416ed4",
      "name": "Extract Query",
      "type": "n8n-nodes-base.set",
      "position": [-832, 64],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://host.docker.internal:11434/api/embeddings",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ { \"model\": \"llama3.2:latest\", \"prompt\": $json.query } }}",
        "options": {}
      },
      "id": "generate-embedding",
      "name": "Generate Embedding",
      "type": "n8n-nodes-base.httpRequest",
      "position": [-640, 64],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://host.docker.internal:6333/collections/successful_schemas/points/search",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ { \"vector\": $json.embedding, \"limit\": 4, \"with_payload\": true } }}",
        "options": {}
      },
      "id": "search-qdrant",
      "name": "Search Qdrant",
      "type": "n8n-nodes-base.httpRequest",
      "position": [-440, 64],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "jsCode": "const qdrantResponse = $input.item.json;\nconst webhookData = $('Webhook Trigger').item.json;\nconst userQuery = $('Extract Query').item.json.query;\n\nlet enhancedSystemMessage = \"You are a specialized synthetic data generator assistant. Your ONLY purpose is to help users generate test/dummy/sample data for various use cases.\\n\\nYOUR ROLE:\\n- Generate synthetic data for ANY use case requested by users\\n- Accept all requests related to data generation, datasets, records, or samples\\n- ONLY decline if asked completely unrelated questions\\n- If user mentions \\\"data\\\", \\\"create\\\", \\\"generate\\\", \\\"dataset\\\", \\\"records\\\" - IT'S A VALID REQUEST, process it!\\n\\nRESPONSE FORMAT (JSON only):\\n{\\n  \\\"message\\\": \\\"Brief explanation of what you're generating\\\",\\n  \\\"schema\\\": [\\n    {\\\"name\\\": \\\"field_name\\\", \\\"type\\\": \\\"field_type\\\"},\\n    ...\\n  ],\\n  \\\"recordCount\\\": number (max 1000)\\n}\\n\\n\";\n\nlet retrievedSchemas = [];\nlet schemasFound = 0;\n\nconst qdrantResults = qdrantResponse.result || [];\n\nif (qdrantResults.length > 0) {\n  enhancedSystemMessage += \"\\n\\nRELEVANT SCHEMA TEMPLATES FROM DATABASE:\\n\";\n  \n  qdrantResults.forEach((result, index) => {\n    const payload = result.payload || {};\n    const score = result.score || 0;\n    const domain = payload.domain || 'Unknown';\n    const schemaStr = payload.schema || '';\n    const description = payload.description || '';\n    const text = payload.text || '';\n    \n    schemasFound++;\n    const similarity = (score * 100).toFixed(0);\n    \n    enhancedSystemMessage += `\\nTemplate ${index + 1} (${similarity}% match): ${domain}\\n`;\n    if (description) enhancedSystemMessage += `Description: ${description}\\n`;\n    \n    try {\n      const parsedSchema = JSON.parse(schemaStr);\n      if (Array.isArray(parsedSchema)) {\n        retrievedSchemas.push(...parsedSchema);\n        enhancedSystemMessage += `Fields: ${parsedSchema.map(f => f.name).join(', ')}\\n`;\n      }\n    } catch (e) {\n      console.log('Schema parse error:', e.message);\n    }\n  });\n  \n  if (schemasFound > 0) {\n    enhancedSystemMessage += \"\\nUse these templates as reference and adapt to user's specific needs.\\n\";\n  }\n} else {\n  console.log('No schemas retrieved from Qdrant');\n}\n\nenhancedSystemMessage += \"\\nBe intelligent, creative, and contextually aware. Design schemas that truly fit what users need!\";\n\nreturn [{\n  json: {\n    systemMessage: enhancedSystemMessage,\n    retrievedExamples: schemasFound,\n    retrievedSchemas: retrievedSchemas,\n    webhookData: webhookData.body,\n    userQuery: userQuery\n  }\n}];"
      },
      "id": "1ff62993-3007-4813-ac02-f63c81b7bb5f",
      "name": "Build Enhanced System Message",
      "type": "n8n-nodes-base.code",
      "position": [-432, 64],
      "typeVersion": 2
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Extract Query').item.json.sessionId }}",
        "contextWindowLength": 10
      },
      "id": "c6e72bfb-eb57-4d52-9c8a-298c1ff64c52",
      "name": "Chat Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "position": [48, 320],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Build Enhanced System Message').item.json.userQuery }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "={{ $('Build Enhanced System Message').item.json.systemMessage }}"
        }
      },
      "id": "d0fe0591-3f8c-4fc8-be66-68b8deed3635",
      "name": "AI Agent (RAG-Enhanced)",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [-272, -32],
      "typeVersion": 1.8
    },
    {
      "parameters": {
        "model": "llama3.2:latest",
        "options": {
          "temperature": 0.7,
          "keepAlive": "1h",
          "numCtx": 2048
        }
      },
      "id": "b456ea61-8b63-4c79-b5b5-a638aa8b5c16",
      "name": "Ollama Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
      "position": [-272, 336],
      "typeVersion": 1,
      "credentials": {
        "ollamaApi": {
          "id": "jmFnQptmLMNT8nwD",
          "name": "Ollama account 2"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "const aiOutput = $input.item.json.output || '';\nconst buildContext = $('Build Enhanced System Message').item.json;\n\nlet parsedResponse;\ntry {\n  let braceCount = 0;\n  let startIndex = -1;\n  let endIndex = -1;\n  \n  for (let i = 0; i < aiOutput.length; i++) {\n    if (aiOutput[i] === '{') {\n      if (braceCount === 0) startIndex = i;\n      braceCount++;\n    } else if (aiOutput[i] === '}') {\n      braceCount--;\n      if (braceCount === 0 && startIndex !== -1) {\n        endIndex = i;\n        break;\n      }\n    }\n  }\n  \n  if (startIndex !== -1 && endIndex !== -1) {\n    const jsonStr = aiOutput.substring(startIndex, endIndex + 1);\n    parsedResponse = JSON.parse(jsonStr);\n    \n    if (!parsedResponse.schema || !Array.isArray(parsedResponse.schema)) {\n      throw new Error('Invalid schema format');\n    }\n    if (typeof parsedResponse.recordCount !== 'number') {\n      parsedResponse.recordCount = 100;\n    }\n  } else {\n    throw new Error('No JSON found in response');\n  }\n} catch (error) {\n  parsedResponse = {\n    message: \"I understood your request. Let me generate some sample data for you.\",\n    schema: [\n      {name: \"id\", type: \"uuid\"},\n      {name: \"name\", type: \"firstName\"},\n      {name: \"email\", type: \"email\"},\n      {name: \"created_at\", type: \"datetime\"}\n    ],\n    recordCount: 100\n  };\n}\n\nconst retrievedSchemas = buildContext.retrievedSchemas || [];\nif (retrievedSchemas.length > 0 && parsedResponse.schema) {\n  parsedResponse.schema = parsedResponse.schema.map(field => {\n    const matchingRetrieved = retrievedSchemas.find(rs => \n      rs.name && field.name && rs.name.toLowerCase() === field.name.toLowerCase()\n    );\n    \n    if (matchingRetrieved && matchingRetrieved.examples && matchingRetrieved.examples.length > 0) {\n      return {\n        ...field,\n        examples: matchingRetrieved.examples,\n        description: matchingRetrieved.description || field.description\n      };\n    }\n    return field;\n  });\n}\n\nreturn [{\n  json: {\n    parsedResponse: parsedResponse,\n    originalOutput: aiOutput,\n    ragEnhanced: buildContext.retrievedExamples > 0,\n    schemasUsed: buildContext.retrievedExamples,\n    retrievedSchemas: retrievedSchemas\n  }\n}];"
      },
      "id": "8ed6af9c-dc7f-4d8e-9c1d-27302191c6f2",
      "name": "Response Parser",
      "type": "n8n-nodes-base.function",
      "position": [32, -16],
      "typeVersion": 1
    },
    {
      "parameters": {
        "functionCode": "const parsedResponse = $input.item.json.parsedResponse;\nconst schema = parsedResponse.schema || [];\nconst recordCount = parsedResponse.recordCount || 100;\nconst message = parsedResponse.message || '';\nconst ragEnhanced = $input.item.json.ragEnhanced;\nconst schemasUsed = $input.item.json.schemasUsed;\nconst retrievedSchemas = $input.item.json.retrievedSchemas || [];\n\nconst generators = {\n  firstName: () => {\n    const names = ['James', 'Mary', 'John', 'Patricia', 'Robert', 'Jennifer', 'Michael', 'Linda'];\n    return names[Math.floor(Math.random() * names.length)];\n  },\n  lastName: () => {\n    const names = ['Smith', 'Johnson', 'Williams', 'Brown', 'Jones', 'Garcia', 'Miller', 'Davis'];\n    return names[Math.floor(Math.random() * names.length)];\n  },\n  email: () => {\n    const first = generators.firstName().toLowerCase();\n    const last = generators.lastName().toLowerCase();\n    const domains = ['gmail.com', 'yahoo.com', 'hotmail.com'];\n    return `${first}.${last}@${domains[Math.floor(Math.random() * domains.length)]}`;\n  },\n  phone: () => {\n    const area = Math.floor(Math.random() * 900) + 100;\n    const prefix = Math.floor(Math.random() * 900) + 100;\n    const line = Math.floor(Math.random() * 9000) + 1000;\n    return `(${area}) ${prefix}-${line}`;\n  },\n  uuid: () => {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      const r = Math.random() * 16 | 0;\n      const v = c === 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n    });\n  },\n  datetime: () => new Date(Date.now() + Math.random() * 365 * 24 * 60 * 60 * 1000).toISOString(),\n  date: () => new Date(Date.now() + Math.random() * 365 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n  integer: () => Math.floor(Math.random() * 10000),\n  decimal: () => (Math.random() * 10000).toFixed(2),\n  amount: () => (Math.random() * 10000).toFixed(2),\n  boolean: () => Math.random() > 0.5,\n  string: () => {\n    const words = ['active', 'pending', 'completed', 'cancelled', 'processing'];\n    return words[Math.floor(Math.random() * words.length)];\n  }\n};\n\nfunction generateIntelligentValue(fieldName, fieldType, retrievedSchemas) {\n  const nameLower = fieldName.toLowerCase();\n  \n  const matchingSchema = retrievedSchemas.find(schema => \n    schema.name && schema.name.toLowerCase().includes(nameLower.split('_')[0])\n  );\n  \n  if (matchingSchema && matchingSchema.examples && matchingSchema.examples.length > 0) {\n    return matchingSchema.examples[Math.floor(Math.random() * matchingSchema.examples.length)];\n  }\n  \n  if (nameLower.includes('flight_number') || nameLower.includes('flight_no')) {\n    const airlines = ['AA', 'UA', 'DL', 'WN', 'B6'];\n    const airline = airlines[Math.floor(Math.random() * airlines.length)];\n    return `${airline}${Math.floor(Math.random() * 9999) + 1}`;\n  }\n  \n  if (nameLower.includes('airport')) {\n    const airports = ['LAX', 'JFK', 'ORD', 'DFW', 'ATL', 'SFO'];\n    return airports[Math.floor(Math.random() * airports.length)];\n  }\n  \n  if (nameLower.includes('id')) return generators.uuid();\n  if (nameLower.includes('name')) return generators.firstName() + ' ' + generators.lastName();\n  if (nameLower.includes('email')) return generators.email();\n  if (nameLower.includes('phone')) return generators.phone();\n  if (nameLower.includes('amount') || nameLower.includes('price')) return generators.amount();\n  if (nameLower.includes('date') || nameLower.includes('time')) return generators.datetime();\n  \n  return generators[fieldType] ? generators[fieldType]() : generators.string();\n}\n\nlet data = [];\nfor (let i = 0; i < Math.min(recordCount, 1000); i++) {\n  const record = {};\n  schema.forEach(field => {\n    record[field.name] = generateIntelligentValue(field.name, field.type, retrievedSchemas);\n  });\n  data.push(record);\n}\n\nreturn [{\n  json: {\n    response: {\n      message: message,\n      data: data,\n      recordCount: data.length,\n      rag_enhanced: ragEnhanced,\n      schemas_used: schemasUsed\n    }\n  }\n}];"
      },
      "id": "86185246-ac42-48c3-8ef1-ad8f4a94b03a",
      "name": "Data Generator (RAG)",
      "type": "n8n-nodes-base.function",
      "position": [176, 64],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "const response = $input.item.json.response;\n\nif (!response || !response.data || response.data.length === 0) {\n  return [$input.item];\n}\n\nconst sampleRecords = response.data.slice(0, 5);\nconst firstRecord = sampleRecords[0];\nconst fieldNames = Object.keys(firstRecord);\n\nconst enrichedSchema = fieldNames.map(fieldName => {\n  const examples = sampleRecords\n    .map(record => record[fieldName])\n    .filter(val => val != null && val !== '');\n  \n  const sampleValue = examples[0];\n  let type = 'string';\n  if (typeof sampleValue === 'number') type = Number.isInteger(sampleValue) ? 'integer' : 'decimal';\n  if (typeof sampleValue === 'boolean') type = 'boolean';\n  if (fieldName.toLowerCase().includes('email')) type = 'email';\n  if (fieldName.toLowerCase().includes('date') || fieldName.toLowerCase().includes('time')) type = 'datetime';\n  if (fieldName.toLowerCase().includes('id')) type = 'uuid';\n  \n  return {\n    name: fieldName,\n    type: type,\n    description: `Auto-generated field: ${fieldName}`,\n    examples: examples.slice(0, 5)\n  };\n});\n\nconst domainName = (response.message || 'auto_domain')\n  .replace(/[^a-zA-Z0-9\\s-]/g, '')\n  .trim()\n  .substring(0, 50) || `auto_${Date.now()}`;\n\ntry {\n  await this.helpers.httpRequest({\n    method: 'POST',\n    url: 'http://host.docker.internal:5678/webhook/manage-domain-with-registry',\n    json: true,\n    body: {\n      domain: domainName,\n      schema: enrichedSchema,\n      action: 'create',\n      description: `Auto-generated domain`,\n      category: 'Auto-Generated'\n    },\n    timeout: 5000\n  });\n  console.log('✅ Stored:', domainName);\n} catch (error) {\n  console.log('⚠️ Skip:', error.message);\n}\n\nreturn [$input.item];"
      },
      "id": "4946eac8-63e7-47a0-8f19-b088cc055a2f",
      "name": "Auto-Store to Registry",
      "type": "n8n-nodes-base.code",
      "position": [384, 160],
      "typeVersion": 2
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=INSERT INTO chat_logs (session_id, user_prompt, ai_message, generated_schema, generated_data_sample, record_count, success, error_message, user_agent)\nVALUES (\n  '{{ $('Extract Query').item.json.sessionId }}',\n  '{{ $('Extract Query').item.json.query.replace(/'/g, \"''\") }}',\n  '{{ $json.response.message.replace(/'/g, \"''\") }}',\n  '{{ JSON.stringify($('Response Parser').item.json.parsedResponse.schema) }}',\n  '{{ JSON.stringify($json.response.data.slice(0, 3)) }}',\n  {{ $json.response.recordCount }},\n  true,\n  NULL,\n  'rag-workflow'\n)\nRETURNING id;",
        "options": {}
      },
      "id": "8d1787d0-5542-4f4c-b843-1a982305c72e",
      "name": "Save Chat Log",
      "type": "n8n-nodes-base.postgres",
      "position": [384, -32],
      "typeVersion": 2.4,
      "credentials": {
        "postgres": {
          "id": "Qj2oredMBiLhvTqE",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { response: $('Data Generator (RAG)').item.json.response } }}",
        "options": {}
      },
      "id": "92a3ac87-779a-4ea9-b639-243ba08af23e",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [592, 64],
      "typeVersion": 1
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [[{"node": "Extract Query", "type": "main", "index": 0}]]
    },
    "Extract Query": {
      "main": [[{"node": "Generate Embedding", "type": "main", "index": 0}]]
    },
    "Generate Embedding": {
      "main": [[{"node": "Search Qdrant", "type": "main", "index": 0}]]
    },
    "Search Qdrant": {
      "main": [[{"node": "Build Enhanced System Message", "type": "main", "index": 0}]]
    },
    "Build Enhanced System Message": {
      "main": [[{"node": "AI Agent (RAG-Enhanced)", "type": "main", "index": 0}]]
    },
    "Chat Memory": {
      "ai_memory": [[{"node": "AI Agent (RAG-Enhanced)", "type": "ai_memory", "index": 0}]]
    },
    "AI Agent (RAG-Enhanced)": {
      "main": [[{"node": "Response Parser", "type": "main", "index": 0}]]
    },
    "Ollama Chat Model": {
      "ai_languageModel": [[{"node": "AI Agent (RAG-Enhanced)", "type": "ai_languageModel", "index": 0}]]
    },
    "Response Parser": {
      "main": [[{"node": "Data Generator (RAG)", "type": "main", "index": 0}]]
    },
    "Data Generator (RAG)": {
      "main": [[
        {"node": "Save Chat Log", "type": "main", "index": 0},
        {"node": "Auto-Store to Registry", "type": "main", "index": 0}
      ]]
    },
    "Auto-Store to Registry": {
      "main": [[{"node": "Webhook Response", "type": "main", "index": 0}]]
    },
    "Save Chat Log": {
      "main": [[{"node": "Webhook Response", "type": "main", "index": 0}]]
    }
  },
  "pinData": {},
  "meta": {
    "instanceId": "528341b2e86c53477b94f918c416779dab805188fc81ebe05aeea5067b309de6"
  }
}

