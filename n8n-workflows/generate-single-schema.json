{
  "name": "Generate Single Schema",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "generate-single-schema",
        "responseMode": "responseNode"
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [50, 300],
      "webhookId": "generate-single-schema-webhook"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://host.docker.internal:11434/api/generate",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  model: 'llama3.2',\n  prompt: `Create a JSON array with ${$json.body.fieldCount} database fields for: ${$json.body.topic}\\n\\nEach field MUST have:\\n- name (string)\\n- type (uuid/string/integer/decimal/date/datetime/boolean/email/phone)\\n- description (string)\\n- examples (array of 2-3 sample values)\\n\\nReturn ONLY the JSON array, nothing else.\\n\\nJSON:`,\n  stream: false\n} }}",
        "options": {}
      },
      "id": "generate-schema",
      "name": "Generate Schema with LLM",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "jsCode": "// Parse LLM response with robust JSON extraction\nconst llmResponse = $input.item.json.response || '';\nconst webhookData = $('Webhook Trigger').item.json.body;\nconst topic = webhookData.topic;\nconst requestedFieldCount = parseInt(webhookData.fieldCount) || 5;\n\nlet schema = [];\nlet aiGenerated = false;\n\ntry {\n  // Remove markdown code blocks\n  let cleaned = llmResponse.replace(/```json/gi, '').replace(/```/g, '').trim();\n  \n  // Extract JSON array - be greedy to capture everything\n  const match = cleaned.match(/\\[(.|\\n)*\\]/);\n  \n  if (match) {\n    const parsed = JSON.parse(match[0]);\n    \n    if (Array.isArray(parsed) && parsed.length > 0) {\n      // Add default examples if missing\n      schema = parsed.map(field => ({\n        name: field.name || 'field',\n        type: field.type || 'string',\n        description: field.description || 'Description',\n        examples: field.examples || ['example1', 'example2']\n      }));\n      aiGenerated = true;\n    }\n  }\n} catch (error) {\n  console.log('LLM parse error:', error.message);\n}\n\n// Fallback if AI failed\nif (schema.length === 0) {\n  const baseFields = [\n    { name: 'id', type: 'uuid', description: 'Unique identifier', examples: ['123e4567-e89b-12d3-a456-426614174000'] },\n    { name: 'name', type: 'string', description: 'Name or title', examples: ['Sample Name', 'Example Title'] },\n    { name: 'description', type: 'string', description: 'Description or details', examples: ['Sample description'] },\n    { name: 'created_at', type: 'datetime', description: 'Creation timestamp', examples: ['2025-10-15 14:30:00'] },\n    { name: 'updated_at', type: 'datetime', description: 'Last update timestamp', examples: ['2025-10-15 16:45:00'] },\n    { name: 'status', type: 'string', description: 'Current status', examples: ['active', 'inactive'] },\n    { name: 'category', type: 'string', description: 'Category or type', examples: ['general', 'special'] },\n    { name: 'value', type: 'decimal', description: 'Numeric value or amount', examples: ['99.99', '149.50'] },\n    { name: 'quantity', type: 'integer', description: 'Count or quantity', examples: ['10', '50', '100'] },\n    { name: 'email', type: 'email', description: 'Email address', examples: ['user@example.com'] },\n    { name: 'phone', type: 'phone', description: 'Phone number', examples: ['+1-555-0123'] },\n    { name: 'is_active', type: 'boolean', description: 'Active status', examples: ['true', 'false'] }\n  ];\n  schema = baseFields.slice(0, requestedFieldCount);\n}\n\nreturn [{\n  json: {\n    success: true,\n    topic: topic,\n    schema: schema,\n    fieldCount: schema.length,\n    aiGenerated: aiGenerated\n  }\n}];"
      },
      "id": "parse-schema",
      "name": "Parse Schema",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [450, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $('Parse Schema').item.json }}",
        "options": {}
      },
      "id": "respond-to-webhook",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [650, 300]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Generate Schema with LLM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Schema with LLM": {
      "main": [
        [
          {
            "node": "Parse Schema",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Schema": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {},
  "versionId": "1"
}
