{
  "name": "Generate Single Schema (With Metadata)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "generate-single-schema",
        "responseMode": "responseNode"
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [50, 300],
      "webhookId": "generate-single-schema-webhook"
    },
    {
      "parameters": {
        "jsCode": "// Generate schema with description and examples for RAG\nconst topic = $input.item.json.body.topic;\nconst fieldCount = parseInt($input.item.json.body.fieldCount) || 7;\n\nlet schema = [];\nconst topicLower = topic.toLowerCase();\n\nif (topicLower.includes('patient') || topicLower.includes('medical') || topicLower.includes('health')) {\n  schema = [\n    { name: 'patient_id', type: 'uuid', description: 'Unique patient identifier', examples: ['550e8400-e29b-41d4-a716-446655440000', 'a1b2c3d4-e5f6-7890-abcd-ef1234567890'] },\n    { name: 'first_name', type: 'string', description: 'Patient first name', examples: ['John', 'Jane', 'Michael'] },\n    { name: 'last_name', type: 'string', description: 'Patient last name', examples: ['Doe', 'Smith', 'Johnson'] },\n    { name: 'date_of_birth', type: 'date', description: 'Patient date of birth', examples: ['1990-05-15', '1985-12-20', '2000-03-10'] },\n    { name: 'medical_record_number', type: 'string', description: 'Medical record number', examples: ['MRN123456', 'MRN789012'] },\n    { name: 'admission_date', type: 'datetime', description: 'Date and time of admission', examples: ['2025-10-15 14:30:00', '2025-10-14 09:15:22'] },\n    { name: 'diagnosis', type: 'string', description: 'Primary diagnosis', examples: ['Hypertension', 'Type 2 Diabetes', 'Pneumonia'] }\n  ];\n} else if (topicLower.includes('customer') || topicLower.includes('user') || topicLower.includes('client')) {\n  schema = [\n    { name: 'customer_id', type: 'uuid', description: 'Unique customer identifier', examples: ['cust_123abc', 'cust_456def'] },\n    { name: 'first_name', type: 'string', description: 'Customer first name', examples: ['Alice', 'Bob', 'Charlie'] },\n    { name: 'last_name', type: 'string', description: 'Customer last name', examples: ['Anderson', 'Brown', 'Clark'] },\n    { name: 'email', type: 'email', description: 'Customer email address', examples: ['alice@example.com', 'bob@company.com'] },\n    { name: 'phone', type: 'phone', description: 'Customer phone number', examples: ['+1-555-123-4567', '+1-555-987-6543'] },\n    { name: 'created_at', type: 'datetime', description: 'Account creation timestamp', examples: ['2025-10-15 10:30:00', '2025-10-10 15:45:22'] },\n    { name: 'status', type: 'string', description: 'Customer account status', examples: ['active', 'inactive', 'suspended'] }\n  ];\n} else if (topicLower.includes('product') || topicLower.includes('inventory') || topicLower.includes('item')) {\n  schema = [\n    { name: 'product_id', type: 'uuid', description: 'Unique product identifier', examples: ['prod_abc123', 'prod_xyz789'] },\n    { name: 'name', type: 'string', description: 'Product name', examples: ['Laptop Pro 15\"', 'Wireless Mouse', 'USB-C Cable'] },\n    { name: 'description', type: 'string', description: 'Product description', examples: ['High-performance laptop', 'Ergonomic wireless mouse'] },\n    { name: 'price', type: 'decimal', description: 'Product price', examples: ['999.99', '29.99', '15.50'] },\n    { name: 'stock_quantity', type: 'integer', description: 'Available stock quantity', examples: ['100', '50', '0'] },\n    { name: 'category', type: 'string', description: 'Product category', examples: ['Electronics', 'Accessories', 'Office'] },\n    { name: 'sku', type: 'string', description: 'Stock keeping unit', examples: ['LAP-PRO-15', 'MOU-WIR-01'] }\n  ];\n} else if (topicLower.includes('order') || topicLower.includes('transaction') || topicLower.includes('sale')) {\n  schema = [\n    { name: 'order_id', type: 'uuid', description: 'Unique order identifier', examples: ['ord_123456', 'ord_789012'] },\n    { name: 'customer_id', type: 'uuid', description: 'Customer identifier', examples: ['cust_abc123', 'cust_def456'] },\n    { name: 'order_date', type: 'datetime', description: 'Order placement date', examples: ['2025-10-15 14:30:00', '2025-10-14 09:15:22'] },\n    { name: 'total_amount', type: 'decimal', description: 'Total order amount', examples: ['1299.99', '549.50', '89.99'] },\n    { name: 'status', type: 'string', description: 'Order status', examples: ['pending', 'processing', 'shipped', 'delivered'] },\n    { name: 'payment_method', type: 'string', description: 'Payment method used', examples: ['credit_card', 'paypal', 'bank_transfer'] },\n    { name: 'shipping_address', type: 'string', description: 'Delivery address', examples: ['123 Main St, City, 12345', '456 Oak Ave, Town, 67890'] }\n  ];\n} else {\n  // Generic schema with description and examples\n  schema = [\n    { name: 'id', type: 'uuid', description: 'Unique record identifier', examples: ['rec_123abc', 'rec_456def'] },\n    { name: 'name', type: 'string', description: 'Record name or title', examples: ['Item A', 'Record B', 'Entry C'] },\n    { name: 'description', type: 'string', description: 'Detailed description', examples: ['This is a sample description', 'Another example text'] },\n    { name: 'created_at', type: 'datetime', description: 'Creation timestamp', examples: ['2025-10-15 10:30:00', '2025-10-14 15:45:22'] },\n    { name: 'updated_at', type: 'datetime', description: 'Last update timestamp', examples: ['2025-10-15 12:00:00', '2025-10-14 16:00:00'] },\n    { name: 'status', type: 'string', description: 'Current status', examples: ['active', 'inactive', 'pending'] },\n    { name: 'category', type: 'string', description: 'Classification category', examples: ['Type A', 'Type B', 'Type C'] }\n  ];\n}\n\n// Ensure we have the right number of fields\nif (schema.length > fieldCount) {\n  schema = schema.slice(0, fieldCount);\n} else if (schema.length < fieldCount) {\n  // Add generic fields with metadata to reach desired count\n  for (let i = schema.length; i < fieldCount; i++) {\n    schema.push({\n      name: `custom_field_${i + 1}`,\n      type: 'string',\n      description: `Custom field ${i + 1} for additional data`,\n      examples: [`value_${i + 1}`, `example_${i + 1}`, `sample_${i + 1}`]\n    });\n  }\n}\n\nreturn [{\n  json: {\n    success: true,\n    topic: topic,\n    schema: schema,\n    fieldCount: schema.length\n  }\n}];"
      },
      "id": "generate-schema",
      "name": "Generate Schema with Metadata",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [250, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "respond-to-webhook",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [450, 300]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [[{"node": "Generate Schema with Metadata", "type": "main", "index": 0}]]
    },
    "Generate Schema with Metadata": {
      "main": [[{"node": "Respond to Webhook", "type": "main", "index": 0}]]
    }
  },
  "active": false,
  "settings": {},
  "versionId": "1"
}

