{
  "name": "Domain Manager - Complete",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "manage-domain",
        "responseMode": "responseNode"
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [50, 300],
      "webhookId": "domain-manager-webhook"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://host.docker.internal:11434/api/embeddings",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ { model: 'all-minilm', prompt: $json.body.domain } }}",
        "options": {
          "response": {
            "response": {
              "neverError": true
            }
          }
        }
      },
      "id": "generate-embedding",
      "name": "Generate Embedding",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://host.docker.internal:6333/collections/successful_schemas/points/scroll",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  limit: 1000,\n  with_payload: true,\n  filter: {\n    must: [\n      {\n        key: 'user_prompt',\n        match: {\n          value: $('Webhook Trigger').item.json.body.domain\n        }\n      }\n    ]\n  }\n} }}",
        "options": {}
      },
      "id": "find-existing",
      "name": "Find Existing Domain",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [450, 300]
    },
    {
      "parameters": {
        "jsCode": "// Process the domain data with enhanced schema structure\nconst webhookData = $('Webhook Trigger').item.json.body;\nconst embeddingData = $('Generate Embedding').item.json;\nconst existingData = $('Find Existing Domain').item.json;\n\nconst domain = webhookData.domain;\nconst schema = webhookData.schema;\nconst embedding = embeddingData.embedding;\nconsole.log('Embedding data:', JSON.stringify(embeddingData));\nconsole.log('Embedding extracted:', embedding ? 'YES' : 'NO');\nconst action = webhookData.action || 'create'; // 'create' or 'update'\n\n// Find existing point ID for updates\nlet existingPointId = null;\nif (existingData.result && existingData.result.points && existingData.result.points.length > 0) {\n  // Use the first matching point ID for updates\n  existingPointId = existingData.result.points[0].id;\n  \n  // If action is 'create' but domain exists, we'll update instead\n  if (action === 'create') {\n    console.log(`Domain '${domain}' already exists, updating instead of creating`);\n  }\n}\n\n// Enhanced schema processing - ensure all fields have proper structure\nconst enhancedSchema = schema.map(field => {\n  const enhancedField = {\n    name: field.name,\n    type: field.type\n  };\n  \n  // Add description if provided\n  if (field.description) {\n    enhancedField.description = field.description;\n  }\n  \n  // Add examples if provided\n  if (field.examples && Array.isArray(field.examples)) {\n    enhancedField.examples = field.examples;\n  }\n  \n  return enhancedField;\n});\n\nreturn [{\n  json: {\n    domain: domain,\n    schema: enhancedSchema,\n    embedding: embedding,\n    existingPointId: existingPointId,\n    hasExisting: existingPointId !== null,\n    action: existingPointId ? 'update' : 'create',\n    fieldCount: enhancedSchema.length,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "process-data",
      "name": "Process Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 300]
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "=http://host.docker.internal:6333/collections/successful_schemas/points",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  points: [\n    {\n      id: $json.existingPointId || (Date.now() + Math.floor(Math.random() * 1000)),\n      vector: $json.embedding,\n      payload: {\n        user_prompt: $json.domain,\n        schema: $json.schema,\n        rating: 'thumbs_up',\n        timestamp: $json.timestamp,\n        action: $json.action,\n        field_count: $json.fieldCount,\n        enhanced: true,\n        version: '2.0'\n      }\n    }\n  ]\n} }}",
        "options": {}
      },
      "id": "upsert-qdrant",
      "name": "Upsert to Qdrant",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [850, 300]
    },
    {
      "parameters": {
        "jsCode": "const data = $input.item.json;\nconst processedData = $('Process Data').item.json;\n\nreturn [{\n  json: {\n    success: true,\n    message: processedData.action === 'update' ? 'Domain updated successfully' : 'Domain created successfully',\n    domain: processedData.domain,\n    action: processedData.action,\n    fieldCount: processedData.fieldCount,\n    hasExamples: processedData.schema.some(field => field.examples && field.examples.length > 0),\n    hasDescriptions: processedData.schema.some(field => field.description),\n    enhanced: true,\n    timestamp: processedData.timestamp,\n    schema: processedData.schema\n  }\n}];"
      },
      "id": "summary",
      "name": "Summary",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1050, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $('Summary').item.json }}",
        "options": {}
      },
      "id": "respond-to-webhook",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1250, 300]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Generate Embedding",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Embedding": {
      "main": [
        [
          {
            "node": "Find Existing Domain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find Existing Domain": {
      "main": [
        [
          {
            "node": "Process Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Data": {
      "main": [
        [
          {
            "node": "Upsert to Qdrant",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upsert to Qdrant": {
      "main": [
        [
          {
            "node": "Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Summary": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {},
  "versionId": "1"
}
